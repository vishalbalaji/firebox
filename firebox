#!/bin/sh
# shellcheck disable=2235,2002,2015

NAME=$(basename "$0")

print_log() {
	echo "$NAME: $1" >&2
}

usage() {
  cat <<eof
Usage: $NAME (<option> | <command> <action>)

Options:
  -h --help   Print this help text and exit.

Commands:
  init         Initialize new profile for PWA.
  service      Commands relating to Services.
  workspace    Commands relating to Workspaces.
  clean        Print instructions to delete all related files.
eof
}

usage_service() {
  cat <<eof
Usage: $NAME service <action>

Options:
  -h --help   Print this help text and exit.

Actions:
  create <name> <url>                          Create new service.
  list [--raw]                                 List all available services. Use '--raw' to list services without formatting.
  launch (--all | <service1> <service2>...)    Launch services. Use '--all' to launch all services.
  delete (--all | <name>)                      Delete service. Use '--all' to delete all services.
eof
}

usage_workspace() {
  cat <<eof
Usage: $NAME workspace <action>

Options:
  -h --help   Print this help text and exit.

Actions:
  create <name>                                       Create new workspace.
  list [--raw]                                        List all available workspaces. Use '--raw' to list workspaces without formatting.
  add <workspace-name> <service1> <service2>...       Add services to workspace.
  remove <workspace-name> <service1> <service2>...    Remove services from workspace.
  launch <name>                                      Launch workspace.
  delete (--all | <name>)                             Delete workspace. Use '--all' to delete all workspaces.
eof
}

[ $# -eq 0 ] && usage && exit 0

command=""

case "$1" in
-h | --help)
	usage
	exit 0
	;;
*)
	command="$1"
	shift
	;;
esac

# Script start

profile_name="$NAME"
profile_dir="$HOME/.local/share/$profile_name"
services_file="$profile_dir/$profile_name-services"
workspaces_file="$profile_dir/$profile_name-workspaces"

init() {
	[ -d "$profile_dir" ] &&
		print_log "Profile already exists." &&
		exit 1

	firefox -CreateProfile "$profile_name $profile_dir"

	# user.js
	# TODO:  Find a way to disable Mozilla start page on first launch

	cat <<eof >"$profile_dir/user.js"
user_pref("toolkit.legacyUserProfileCustomizations.stylesheets", true);
user_pref("extensions.activeThemeID", "firefox-compact-dark@mozilla.org");
user_pref("browser.toolbars.bookmarks.visibility", "never");
user_pref("browser.startup.homepage", "");
user_pref("browser.sessionstore.restore_tabs_lazily", "never");
user_pref("browser.sessionstore.resume_from_crash", "never");
user_pref("browser.sessionstore.restore_on_demand", "never");
user_pref("browser.uiCustomization.state", "{\"placements\":{\"widget-overflow-fixed-list\":[],\"nav-bar\":[],\"toolbar-menubar\":[],\"TabsToolbar\":[],\"PersonalToolbar\":[]},\"seen\":[],\"dirtyAreaCache\":[],\"currentVersion\":18,\"newElementCount\":18}");
eof

	# userChrome.css
	mkdir -p "$profile_dir/chrome"
	cat <<eof >"$profile_dir/chrome/userChrome.css"
@namespace url("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"); /* set default namespace to XUL */
browser {margin-right: -14px; margin-bottom: -14px;}

#nav-bar { visibility: collapse; }

#alltabs-button { visibility: collapse; }

.tab-label-container, .tab-close-button { display: none !important }
.tabbrowser-tab {min-width: 35px !important; -moz-box-flex: 0 !important; }
.tab-icon-overlay {
	opacity: 1 !important;
	stroke: var(--tab-icon-overlay-stroke) !important;
	top: -5.5px !important;
	inset-inline-end: -6px !important;
	padding: 2px !important;
	z-index: 1 !important;
}
eof

	echo "Profile '$profile_name' created at: $profile_dir."
}

create_service() {
	[ ! -f "$services_file" ] &&
		touch "$services_file"

	grep -qiEw "^<\|$profile_name:$1\|>" "$services_file" &&
		print_log "Service '$1' already exists." &&
		exit 1

	echo "<|$profile_name:$1|><|sep|>$2" >>"$services_file"
	print_log "Created service: $1"
}

get_search_query() {
	query=""

	for i in "$@"; do
		grep -qiEw "^<\|$profile_name:$i\|>" "$services_file" &&
			query="$query<\|$profile_name:$i\|>|" ||
			print_log "Service '$i' does not exist. Ignoring..."
	done

	echo "$query" | sed 's/|$//'
}

get_services() {
	if [ -z "$1" ]; then
		echo ''
	elif [ "$1" = "--all" ]; then
		cat "$services_file"
	else
		grep -iEw "^($1)" "$services_file" | sed 's/.*<|sep|>//g'
	fi
}

launch_services() {
	urls=""

	if [ "$(echo "$1" | wc -l)" -gt 1 ]; then
		urls="$(echo "$1" | sed -z 's/\n/ /g;s/^\s*//;s/\s*$//')"
	else
		urls="-new-window $1"
	fi

	# shellcheck disable=2086
	setsid -f firefox -P "$profile_name" --class "$profile_name" $urls >/dev/null 2>&1
}

service() {
	([ "$1" = "-h" ] || [ "$1" = "--help" ]) &&
		usage_service &&
		exit

	([ "$1" != "create" ] && [ ! -f "$services_file" ]) &&
		print_log "No services available. Run '$NAME service create' to create a service." &&
		exit 1

	action="$1"
	shift

	case "$action" in

	create)
		[ "$#" -ne 2 ] &&
			print_log "Invalid format for command." &&
			usage_service &&
			exit 1

		# TODO: URL validation for $2

		create_service "$1" "$2"
		;;

	list)
		[ "$#" -gt 1 ] &&
			print_log "Unkown argument: '$1'" &&
			usage_service &&
			exit 1

		([ "$1" != "--raw" ] && [ "$1" != "" ]) &&
			print_log "Invalid argument: '$1'" &&
			usage_service &&
			exit 1

		[ "$1" = "--raw" ] &&
			get_services "--all" ||
			get_services "--all" | sed "s/<|sep|>/ | /g;s/<|$profile_name://g;s/|>//g"
		;;

	launch)
		[ "$1" = "--all" ] &&
			urls="$(get_services --all | sed 's/.*<|sep|>//g')" ||
			urls="$(get_services "$(get_search_query "$@")")"

		[ -n "$urls" ] &&
			launch_services "$urls" ||
			(print_log "No valid services provided. Exiting..." && exit 1)
		;;

	delete)
		[ "$#" -ne 1 ] &&
			print_log "Only one service can be deleted a time." &&
			usage_service &&
			exit 1

		if [ "$1" = "--all" ]; then
			printf "%s" "$profile_name: Are you sure you want to delete all your services? (y/N): "
			read -r confirm
			case "$confirm" in
			y | Y)
				rm "$services_file" &&
					print_log "All services deleted."
				;;
			*)
				print_log "No services deleted."
				;;
			esac

		else
			if ! grep -qiEw "^<\|$profile_name:$1\|>" "$workspaces_file"; then
				print_log "Workspace '$1' does not exist."
			else
				sed -in "/^<|$profile_name:$1|>/Id" "$workspaces_file" &&
					print_log "Workspace '$1' deleted"

				[ "$(cat "$services_file" | wc -l)" -eq 0 ] && rm "$services_file"
			fi
		fi
		;;

	*)
		print_log "Invalid action: '$action'"
		usage_service
		exit 1
		;;

	esac
}

create_workspace() {
	[ ! -f "$workspaces_file" ] &&
		touch "$workspaces_file"

	grep -qiEw "^<\|$profile_name:$1\|>" "$workspaces_file" &&
		print_log "Workspace '$1' already exists." &&
		exit 1

	echo "<|$profile_name:$1|>" >>"$workspaces_file"
	print_log "Created workspace: $1"
}

get_workspaces() {
	if [ -z "$1" ]; then
		echo ''
	elif [ "$1" = "--all" ]; then
		cat "$workspaces_file"
	else
		grep -iEw "^<\|$profile_name:$1\|>" "$workspaces_file" | sed "s/^<|$profile_name:$1|><|sep|>//;s/<|sep|>/ /g"
	fi
}

add_to_workspace() {
	! grep -qiEw "^<\|$profile_name:$1\|>" "$workspaces_file" &&
		print_log "Workspace '$1' does not exist." &&
		exit 1

	service_list=""

	for i in $2; do

		if grep -qiEw "^<\|$profile_name:$i\|>" "$services_file"; then
			if ! grep -qiEw "^<\|$profile_name:$1\|>.*<\|sep\|>$i" "$workspaces_file"; then
				print_log "Adding service '$i' to workspace '$1'."
				service_list="$service_list<|sep|>$i"
			else
				print_log "Service '$i' already exists in workspace."
			fi
		else
			print_log "Service '$i' does not exist. Ignoring..."
		fi

	done

	sed -in "s/^<|$profile_name:$1|>.*/&$service_list/I" "$workspaces_file"
}

remove_from_workspace() {
	! grep -qiEw "^<\|$profile_name:$1\|>" "$workspaces_file" &&
		print_log "Workspace '$1' does not exist." &&
		exit 1

	service_list=""

	for i in $2; do
		if grep -qiEw "^<\|$profile_name:$1\|>.*<\|sep\|>$i" "$workspaces_file"; then
			print_log "Deleting service '$i' from workspace '$1'."
			sed -in "/^<|$profile_name:$1|>/I{s/<|sep|>$i//}" "$workspaces_file"
		else
			print_log "Service '$i' does not exist. Ignoring..."
		fi
	done
}

workspace() {
	([ "$1" = "-h" ] || [ "$1" = "--help" ]) &&
		usage_workspace &&
		exit

	([ "$1" != "create" ] && [ ! -f "$workspaces_file" ]) &&
		print_log "No workspaces available. Run '$NAME workspace create' to create a workspace." &&
		exit 1

	action="$1"
	shift

	case "$action" in

	create)
		[ "$#" -ne 1 ] &&
			print_log "Invalid format for command." &&
			usage_workspace &&
			exit 1

		create_workspace "$1"
		;;

	list)
		[ "$#" -gt 1 ] &&
			print_log "Unkown argument: '$1'" &&
			usage_workspace &&
			exit 1

		([ "$1" != "--raw" ] && [ "$1" != "" ]) &&
			print_log "Invalid argument: '$1'" &&
			usage_workspace &&
			exit 1

		[ "$1" = "--raw" ] &&
			get_workspaces "--all" ||
			get_workspaces "--all" | sed "s/<|sep|>/\n- /g;s/<|$profile_name://g;s/|>/:/g"
		;;

	add)
		[ "$#" -lt 2 ] &&
			print_log "Invalid format for command." &&
			usage_workspace &&
			exit 1

		[ ! -f "$services_file" ] &&
			print_log "No services available. Run '$NAME service create' to create a service." &&
			exit 1

		workspace_name="$1"
		shift
		services="$*"

		add_to_workspace "$workspace_name" "$services"
		;;

	launch)
		[ "$#" -gt 1 ] &&
			print_log "Can only launch one workspace at a time." &&
			usage_workspace &&
			exit 1

		services="$(get_workspaces "$1")"

		# shellcheck disable=2086
		[ -n "$services" ] &&
			service launch $services ||
			(print_log "Invalid workspace '$1'." && exit 1)
		;;

	remove)
		[ "$#" -lt 2 ] &&
			print_log "Invalid format for command." &&
			usage_workspace &&
			exit 1

		workspace_name="$1"
		shift
		services="$*"

		remove_from_workspace "$workspace_name" "$services"
		;;

	delete)
		[ "$#" -ne 1 ] &&
			print_log "Only one workspace can be deleted a time." &&
			usage_workspace &&
			exit 1

		if [ "$1" = "--all" ]; then
			printf "%s" "$profile_name: Are you sure you want to delete all your workspaces? (y/N): "
			read -r confirm
			case "$confirm" in
			y | Y)
				rm "$workspaces_file" &&
					print_log "All workspaces deleted."
				;;
			*)
				print_log "No workspaces deleted."
				;;
			esac

		else
			if ! grep -qiEw "^<\|$profile_name:$1\|>" "$workspaces_file"; then
				print_log "Workspace '$1' does not exist."
			else
				sed -in "/^<|$profile_name:$1|>/Id" "$workspaces_file" &&
					print_log "Workspace '$1' deleted"

				[ "$(cat "$workspaces_file" | wc -l)" -eq 0 ] && rm "$workspaces_file"
			fi

		fi

		;;

	*)
		print_log "Invalid action: '$action'"
		usage_workspace
		exit 1
		;;

	esac

}

clean() {
	print_log "You can delete the created profile and all associated data"
	print_log "from Firefox's profile manager by running 'firefox -ProfileManager'."
}

test() {
	echo "test"
}

([ "$command" != "init" ] && [ "$command" != "test" ] && [ ! -d "$profile_dir" ]) &&
	print_log "App not initialized. run '$NAME init' before running a command." &&
	exit 1

([ "$command" = "init" ] && [ "$#" -gt 0 ]) &&
	print_log "Unrecognized action '$1'" &&
	usage &&
	exit 1

case "$command" in

init | service | workspace | clean)
	"$command" "$@"
	;;
*)
	print_log "Invalid Option '$command'"
	usage
	exit 1
	;;
esac
