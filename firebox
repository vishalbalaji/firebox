#!/bin/sh

NAME=$(basename "$0")
VERSION="0.1.0"

print_log() {
	echo "$NAME: $1" >&2
}

# TODO: implement profiles
usage() {
	cat <<eof
Usage: $NAME (<option> | <command> <action>)

Options:
  -h --help     Print this help text and exit.
  -v --version  Print the current version and exit.

Commands:
  init       Initialize new profile for PWA.
  service    Commands relating to Services.
  workspace  Commands relating to Workspaces.
  config     Commands relating to Profile and Configuration.
  explorer   Launch a raw PWA instance.
  clean      Print instructions to delete all related files.
eof
}

usage_service() {
	cat <<eof
Usage: $NAME service <action>

Options:
  -h --help  Print this help text and exit.

Actions:
  list [--raw]                               List all available services. '--raw' removes formatting.
  launch (--all | <service1> <service2>...)  Launch services. '--all' launches all services.
eof
}

usage_workspace() {
	cat <<eof
Usage: $NAME workspace <action>

Options:
  -h --help  Print this help text and exit.

Actions:
  create <name>                                     Create new workspace.
  list (--all | <name>) [--raw]                     List a workspace and its corresponding servicecs. '--all' lists all workspaces. '--raw' removes formatting.
  add <workspace-name> <service1> <service2>...     Add services to workspace.
  remove <workspace-name> <service1> <service2>...  Remove services from workspace.
  launch <name>                                     Launch workspace.
  delete (--all | <name>)                           Delete workspace. '--all' deletes all workspaces.
eof
}

usage_config() {
	cat <<eof
Usage: $NAME config <action>

Options:
  -h --help   Print this help text and exit.

Actions:
  print_profile_dir                                   Print the PWA profile directory.
  print_separator [--escaped]                         Print the separator character used in this script. '--escaped' prints the escaped version.
  create_service_symlinks <directory-name> [--clean]  Create an executable script and symlinks for all available services. '--clean' removes all existing symlinks and creates new ones.
eof
}

[ $# -eq 0 ] && usage && exit 0

command=""

case "$1" in
-h | --help)
	usage
	exit 0
	;;
-v | --version)
	echo "$VERSION"
	exit 0
	;;
*)
	command="$1"
	shift
	;;
esac

## Script start ##

profile_name="$NAME"
profile_dir="$HOME/.local/share/$profile_name"
services_file="$profile_dir/$profile_name-services"
workspaces_file="$profile_dir/$profile_name-workspaces"
sep="<|$profile_name:sep|>"
sep_esc="<\|$profile_name:sep\|>"

userchrome() {
	echo '.tab-icon-image,.tab-icon-overlay,.tabbrowser-tab{margin:0!important}#alltabs-button,#editBookmarkPanel,#scrollbutton-down,#scrollbutton-up,#sidebar-box,#sidebar-splitter,#star-button-box,#tabbrowser-arrowscrollbox-periphery,.tab-close-button,.tab-label-container,spacer[part=overflow-end-indicator],spacer[part=overflow-start-indicator]{visibility:collapse!important}#nav-bar{position:absolute!important;top:0!important;inset-inline:0!important;opacity:0!important;background-color:var(--lwt-accent-color)!important;border-bottom:1px solid rgba(0,0,0,.5)!important;z-index:9999!important;pointer-events:none!important;padding-block:0.15em!important}#nav-bar:focus-within{opacity:100%!important;pointer-events:auto!important}.tabbrowser-tab{-moz-box-flex:0!important;min-width:40px!important;max-height:44px!important;flex:0!important}.tab-icon-stack{position:absolute;top:50%;left:50%;padding:0!important;transform:translateX(-50%) translateY(-50%)!important}.tab-icon-overlay{opacity:1!important;stroke:var(--tab-icon-overlay-stroke)!important;top:-5.5px!important;inset-inline-end:-6px!important;padding:2px!important;z-index:1!important}'
}

userjs() {
	echo 'user_pref("toolkit.legacyUserProfileCustomizations.stylesheets", true);'
	echo 'user_pref("extensions.activeThemeID", "firefox-compact-dark@mozilla.org");'
	echo 'user_pref("browser.toolbars.bookmarks.visibility", "never");'
	echo 'user_pref("browser.startup.homepage", "");'
	echo 'user_pref("browser.sessionstore.restore_tabs_lazily", "never");'
	echo 'user_pref("browser.sessionstore.resume_from_crash", "never");'
	echo 'user_pref("browser.startup.homepage", "about:blank");'
	echo 'user_pref("browser.newtabpage.enabled", false);'
	echo 'user_pref("browser.sessionstore.restore_on_demand", "never");'
	echo 'user_pref("browser.urlbar.showSearchSuggestionsFirst", false);'
	# responsible for removing annoying pinned initial setup thing
	# causes bug where layout switches
	# echo 'user_pref("browser.uiCustomization.state", "{\"placements\":{\"widget-overflow-fixed-list\":[],\"nav-bar\":[],\"toolbar-menubar\":[],\"TabsToolbar\":[],\"PersonalToolbar\":[]},\"seen\":[],\"dirtyAreaCache\":[],\"currentVersion\":18,\"newElementCount\":18}");'
}

wait_for_bookmarks() {
	while true; do
		if [ ! -f "$profile_dir/places.sqlite" ]; then
			sleep 1s
		else
			break
		fi
	done

	while true; do
		cp "$profile_dir/places.sqlite" /tmp/places.sqlite
		bookmarks=$(sqlite3 -separator "$sep" /tmp/places.sqlite 'select b.title,p.url from moz_bookmarks as b,moz_places as p where b.fk=p.id' 2>/dev/null || echo '')
		[ -n "$bookmarks" ] && break
		sleep 0.5s
	done
}

init() {
	[ "$#" -gt 0 ] &&
		print_log "Invalid argument '$1'." &&
		usage &&
		exit 1

	[ -d "$profile_dir" ] &&
		print_log "Profile already exists." &&
		exit 1

	firefox -CreateProfile "$profile_name $profile_dir"

	# user.js
	userjs >"$profile_dir/user.js"

	# userChrome.css
	mkdir -p "$profile_dir/chrome"
	userchrome >"$profile_dir/chrome/userChrome.css"

	print_log "Initializing $NAME..."
	(
		firefox -P "$profile_name" --class "$profile_name-explorer" --headless >/dev/null 2>&1 &
		wait_for_bookmarks && kill "$!" &&
			sqlite3 /tmp/places.sqlite 'delete from moz_bookmarks; delete from moz_places;' &&
			rm "$profile_dir"/places.sqlite* &&
			mv /tmp/places.sqlite "$profile_dir"
	) &&
		print_log "Profile '$profile_name' created at: '$profile_dir'." &&
		print_log "Run '$NAME explorer' to create new services."
}

create_service() {
	[ ! -f "$services_file" ] &&
		touch "$services_file"

	grep -qiEw "^<\|$profile_name:$1\|>" "$services_file" &&
		print_log "Service '$1' already exists." &&
		exit 1

	echo "<|$profile_name:$1|><|sep|>$2" >>"$services_file"
	print_log "Created service: $1."
}

get_search_query() {
	query=""

	for i in "$@"; do
		if grep -qiE "^$i$sep_esc" "$services_file"; then
			query="$query$i|"
			print_log "Launching service '$i'."
		else
			print_log "Service '$i' does not exist. Ignoring..."
		fi
	done

	echo "$query" | sed 's/|$//'
}

get_services() {
	if [ -z "$1" ]; then
		echo ''
	elif [ "$1" = "--all" ]; then
		cat "$services_file"
	else
		grep -iE "^($1)$sep_esc" "$services_file" | sed "s/^.*$sep//g"
	fi
}

launch_services() {
	urls=""

	if [ "$(echo "$1" | wc -l)" -gt 1 ]; then
		urls=$(echo "$1" | sed -z 's/\n/ /g;s/^\s*//;s/\s*$//')
	else
		urls="-new-window $1"
	fi

	echo "$urls" | xargs setsid -f firefox -P "$profile_name" --class "$profile_name-services" >/dev/null 2>&1
}

service() {
	[ -z "$1" ] &&
		usage_service &&
		exit

	if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
		usage_service &&
			exit
	fi

	if [ "$1" != "create" ] && [ ! -f "$services_file" ]; then
		print_log "No services available. Run '$NAME explorer' to create services." &&
			exit 1
	fi

	action="$1"
	shift

	case "$action" in

	list)
		[ "$#" -gt 1 ] &&
			print_log "Unkown argument: '$1'." &&
			usage_service &&
			exit 1

		if [ "$1" != "--raw" ] && [ "$1" != "" ]; then
			print_log "Invalid argument: '$1'." &&
				usage_service &&
				exit 1
		fi

		if [ "$1" = "--raw" ]; then
			get_services "--all"
		else
			get_services "--all" | sed "s/$sep/ => /g"
		fi
		;;

	launch)
		if [ -n "$(xdotool search --class "$profile_name-explorer")" ]; then
			print_log "Cannot launch services while explorer is running." &&
				exit 1
		fi

		[ "$1" = "--all" ] &&
			urls=$(get_services --all | sed "s/.*$sep//g") ||
			urls=$(get_services "$(get_search_query "$@")")

		if [ -n "$urls" ]; then
			launch_services "$urls"
		else
			print_log "No valid services provided. Exiting..." && exit 1
		fi
		;;

	*)
		print_log "Invalid action: '$action'."
		usage_service
		exit 1
		;;

	esac
}

create_workspace() {
	[ ! -f "$workspaces_file" ] &&
		touch "$workspaces_file"

	grep -qiE "^$1$sep_esc" "$workspaces_file" &&
		print_log "Workspace '$1' already exists." &&
		exit 1

	echo "$1$sep" >>"$workspaces_file"
	print_log "Created workspace: $1."
}

get_workspaces() {
	if [ -z "$1" ]; then
		echo ''
	elif [ "$1" = "--all" ]; then
		cat "$workspaces_file"
	else
		services=$(grep -iE "^$1$sep_esc" "$workspaces_file")
		if [ "$2" = "--raw" ]; then
			echo "$services"
		else
			service_list=""

			services=$(echo "$services" | sed "s/^$1$sep//;s/$sep/\n/g")
			echo "$services"
			# echo "$services" | (
			# 	while read -r i; do
			#        service_list="$(echo "$i" | sed 's/ /\\ /g') $service_list"
			# 	done
			# 	echo "$service_list"
			# )

		fi
	fi
}

add_to_workspace() {
	workspace_name="$1" && shift

	! grep -qiE "^$workspace_name$sep_esc" "$workspaces_file" &&
		print_log "Workspace '$workspace_name' does not exist." &&
		exit 1

	service_list=""

	for i in "$@"; do

		if grep -qiE "^$i$sep_esc" "$services_file"; then
			if ! grep -qiE "^$workspace_name.*$sep_esc$i" "$workspaces_file"; then
				print_log "Adding service '$i' to workspace '$workspace_name'."
				service_list="$service_list$sep$i"
			else
				print_log "Service '$i' already exists in workspace."
			fi
		else
			print_log "Service '$i' does not exist. Ignoring..."
		fi

	done

	if [ -n "$service_list" ]; then
		service_list="$(echo "$service_list" | sed "s/$sep//")$sep"
		sed -in "s/^$workspace_name$sep.*/&$service_list/I" "$workspaces_file"
	else
		print_log "No valid services provided. Exiting." &&
			exit 1
	fi

}

remove_from_workspace() {
	workspace="$1" && shift

	! grep -qiE "^$workspace_name$sep_esc" "$workspaces_file" &&
		print_log "Workspace '$workspace_name' does not exist." &&
		exit 1

	service_list=""

	for i in "$@"; do
		if grep -qiE "^$workspace_name.*$sep_esc$i" "$workspaces_file"; then
			print_log "Deleting service '$i' from workspace '$workspace_name'."
			sed -in "/^$workspace_name$sep/I{s/$sep$i//}" "$workspaces_file"
		else
			print_log "Service '$i' does not exist. Ignoring..."
		fi
	done
}

workspace() {
	[ -z "$1" ] &&
		usage_workspace &&
		exit

	if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
		usage_workspace &&
			exit
	fi

	if [ "$1" != "create" ] && [ ! -f "$workspaces_file" ]; then
		print_log "No workspaces available. Run '$NAME workspace create' to create a workspace." &&
			exit 1
	fi

	action="$1"
	shift

	case "$action" in

	create)
		[ "$#" -ne 1 ] &&
			print_log "Invalid format for command." &&
			usage_workspace &&
			exit 1

		create_workspace "$1"
		;;

	list)
		[ "$#" -gt 2 ] &&
			print_log "Unkown argument: '$3'." &&
			usage_workspace &&
			exit 1

		[ -z "$1" ] &&
			print_log "You need to specify a workspace." &&
			usage_workspace &&
			exit 1

		if [ "$2" != "--raw" ] && [ "$2" != "" ]; then
			print_log "Invalid argument: '$2'." &&
				usage_workspace &&
				exit 1
		fi

		workspace=$(get_workspaces "$1" --raw)

		[ -z "$workspace" ] &&
			print_log "Invalid workspace '$1'." &&
			exit 1

		if [ "$2" = "--raw" ]; then
			echo "$workspace"
		else
			echo "$workspace" | sed "s/$sep\$//;s/$sep/\n  - /g;"
		fi
		;;

	add)
		[ "$#" -lt 2 ] &&
			print_log "Invalid format for command." &&
			usage_workspace &&
			exit 1

		[ ! -f "$services_file" ] &&
			print_log "No services available. Run '$NAME service create' to create a service." &&
			exit 1

		workspace_name="$1" && shift

		add_to_workspace "$workspace_name" "$@"
		;;

	launch)
		if [ -n "$(xdotool search --class "$profile_name-explorer")" ]; then
			print_log "Cannot launch workspaces while explorer is running." &&
				exit 1
		fi

		[ "$#" -gt 1 ] &&
			print_log "Can only launch one workspace at a time." &&
			usage_workspace &&
			exit 1

		services=$(get_workspaces "$1" | sed 's/ /\\ /g')

		if [ -n "$services" ]; then
			echo "$services" | xargs "$0" service launch
		else
			print_log "Workspace '$1' is empty." && exit 1
		fi
		;;

	remove)
		[ "$#" -lt 2 ] &&
			print_log "Invalid format for command." &&
			usage_workspace &&
			exit 1

		workspace_name="$1" && shift

		remove_from_workspace "$workspace_name" "$@"
		;;

	delete)
		[ "$#" -ne 1 ] &&
			print_log "Only one workspace can be deleted a time." &&
			usage_workspace &&
			exit 1

		if [ "$1" = "--all" ]; then
			printf "%s" "$profile_name: Are you sure you want to delete all your workspaces? (y/N): "
			read -r confirm </dev/tty
			case "$confirm" in
			y | Y)
				rm "$workspaces_file" &&
					print_log "All workspaces deleted."
				;;
			*)
				print_log "No workspaces deleted."
				;;
			esac

		else
			if ! grep -qiE "^$1$sep_esc" "$workspaces_file"; then
				print_log "Workspace '$1' does not exist."
			else
				printf "%s" "$profile_name: Are you sure you want to delete workspace '$1'? (y/N): "
				read -r confirm </dev/tty
				case "$confirm" in
				y | Y)
					sed -in "/^$1$sep/Id" "$workspaces_file" &&
						print_log "Workspace '$1' deleted."
					;;
				*)
					print_log "No workspaces deleted."
					;;
				esac

				[ "$(wc -l <"$workspaces_file")" -eq 0 ] && rm "$workspaces_file"
			fi
		fi
		;;

	*)
		print_log "Invalid action: '$action'."
		usage_workspace
		exit 1
		;;

	esac

}

clean() {
	print_log "You can delete the created profile and all associated data."
	print_log "from Firefox's profile manager by running 'firefox -ProfileManager'."
}

save_bookmarks() {
	new_bookmarks=$(sqlite3 -separator "$sep" "$profile_dir/places.sqlite" 'select b.title,p.url from moz_bookmarks as b,moz_places as p where b.fk=p.id')

	existing_bookmarks=""
	[ -f "$services_file" ] && existing_bookmarks=$(cat "$services_file")

	# TODO: show which services were added and which were removed separately.
	echo "Current Services:"
	if [ -n "$existing_bookmarks" ]; then
		echo
		echo "$existing_bookmarks" | sed 's/<|firebox:sep|>/ => /g'
		echo
	else
		echo "  - NIL"
		echo
	fi

	if [ "$new_bookmarks" != "$existing_bookmarks" ]; then
		echo "New Services:"
		if [ -n "$new_bookmarks" ]; then
			echo
			echo "$new_bookmarks" | sed 's/<|firebox:sep|>/ => /g'
			echo
		else
			echo "  - NIL"
			echo
		fi

		printf "%s" "$profile_name: Do you want to add the above services? (y/N): "
		read -r confirm </dev/tty

		case "$confirm" in
		y | Y)
			echo "$new_bookmarks" >"$services_file"

			[ -z "$new_bookmarks" ] && rm "$services_file"

			print_log "Services updated!"
			;;
		*)
			print_log "No changes made to existing services."
			cp /tmp/places.sqlite "$profile_dir/places.sqlite"
			;;
		esac

	else
		print_log "No changes made to existing services."
	fi
}

explorer() {
	if [ -n "$(xdotool search --class "$profile_name-services")" ]; then
		print_log "Cannot launch explorer while services are running." &&
			exit 1
	fi

	sed -i '/toolkit.legacyUserProfileCustomizations.stylesheets/{s/true/false/}' "$profile_dir/user.js"

	cp "$profile_dir/places.sqlite" /tmp/places.sqlite &&
		firefox -P "$profile_name" --class "$profile_name-explorer" >/dev/null 2>&1 &&
		([ -f /tmp/places.sqlite ] && save_bookmarks) &&
		sed -i '/toolkit.legacyUserProfileCustomizations.stylesheets/{s/false/true/}' "$profile_dir/user.js" &&
		([ -f /tmp/places.sqlite ] && rm /tmp/places.sqlite)

}

print_separator() {
	if [ "$1" = "--escaped" ]; then
		echo "$sep_esc"
	else
		echo "$sep"
	fi
}

print_profile_dir() {
	echo "$profile_dir"
}

launch_service_script() {
	cat >"$1" <<eof
#!/bin/sh
service_name=\$(basename "\$0")
[ "\$0" != "$1" ] && firebox service launch "\$service_name"
eof
}

create_service_symlinks() {
	out_dir="$1"

	if [ -z "$out_dir" ]; then
		out_dir="$HOME/.local/bin/firebox"
	else
		shift
	fi

	[ ! -d "$out_dir" ] && mkdir -p "$out_dir"

	[ "$1" = "--clean" ] &&
		print_log "Removing existing symlinks" &&
		find "$out_dir" -type l -delete &&
		shift

	service_script_file="$profile_dir/firebox-launch-service"

	[ ! -f "$service_script_file" ] &&
		(
			launch_service_script "$service_script_file"
			chmod +x "$service_script_file"
		)

	service list --raw | sed "s/$sep.*//" | while read -r service; do
		ln -sf "$service_script_file" "$out_dir/$service"
		print_log "Created sym link at: $out_dir/$service"
	done
}

config() {
	[ -z "$1" ] &&
		usage_config &&
		exit

	if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
		usage_config &&
			exit
	fi

	action="$1"
	shift

	case "$action" in
	print_separator | \
		print_profile_dir | \
		create_service_symlinks)
		"$action" "$@"
		;;
	*)
		print_log "Invalid action: '$action'."
		usage_config
		exit 1
		;;
	esac
}

if {
	[ "$command" != "init" ] &&
		[ "$command" != "test" ] &&
		[ "$command" != "config" ]
} &&
	[ ! -d "$profile_dir" ]; then
	print_log "App not initialized. run '$NAME init' before running a command." &&
		exit 1
fi

test() {
	service list --raw | sed "s/$sep.*//"
}

case "$command" in
init | \
	service | \
	workspace | \
	clean | \
	config | \
	test | \
	explorer)

	"$command" "$@"
	;;
*)
	print_log "Invalid Option '$command'."
	usage
	exit 1
	;;
esac
