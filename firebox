#!/bin/sh

NAME=$(basename "$0")
VERSION="0.1.0"

print_log() {
	echo "$NAME: $1" >&2
}

usage() {
	cat <<eof
Usage: $NAME (<option> | <command> <action>)

Options:
  -h --help      Print this help text and exit.
  -v --version   Print the current version and exit.

Commands:
  init         Initialize new profile for PWA.
  service      Commands relating to Services.
  workspace    Commands relating to Workspaces.
  clean        Print instructions to delete all related files.
eof
}

usage_service() {
	cat <<eof
Usage: $NAME service <action>

Options:
  -h --help   Print this help text and exit.

Actions:
  list [--raw]                                 List all available services. Use '--raw' to list services without formatting.
  launch (--all | <service1> <service2>...)    Launch services. Use '--all' to launch all services.
eof
}

usage_workspace() {
	cat <<eof
Usage: $NAME workspace <action>

Options:
  -h --help   Print this help text and exit.

Actions:
  create <name>                                       Create new workspace.
  list [--raw]                                        List all available workspaces. Use '--raw' to list workspaces without formatting.
  add <workspace-name> <service1> <service2>...       Add services to workspace.
  remove <workspace-name> <service1> <service2>...    Remove services from workspace.
  launch <name>                                      Launch workspace.
  delete (--all | <name>)                             Delete workspace. Use '--all' to delete all workspaces.
eof
}

[ $# -eq 0 ] && usage && exit 0

command=""

case "$1" in
-h | --help)
	usage
	exit 0
	;;
-v | --version)
	echo "$VERSION"
	exit 0
	;;
*)
	command="$1"
	shift
	;;
esac

## Script start ##

profile_name="$NAME"
profile_dir="$HOME/.local/share/$profile_name"
services_file="$profile_dir/$profile_name-services"
workspaces_file="$profile_dir/$profile_name-workspaces"
default_bookmark_file="$profile_dir/$profile_name-default_bookmarks"
sep="<|$profile_name:sep|>"
sep_esc="<\|$profile_name:sep\|>"

userchrome() {
	echo '@namespace url("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul");browser{margin-right:-14px;margin-bottom:-14px}#alltabs-button,#nav-bar,#sidebar-box,#sidebar-splitter{visibility:collapse}.tab-close-button,.tab-label-container,tab[first-visible-tab=true][last-visible-tab=true],tab[first-visible-tab=true][last-visible-tab=true]+#tabbrowser-arrowscrollbox-periphery{display:none!important}.tabbrowser-tab{min-width:35px!important;-moz-box-flex:0!important}.tab-icon-overlay{opacity:1!important;stroke:var(--tab-icon-overlay-stroke)!important;top:-5.5px!important;inset-inline-end:-6px!important;padding:2px!important;z-index:1!important}#tabbrowser-arrowscrollbox,#tabbrowser-tabs{min-height:0!important}'
}

userjs() {
	echo 'user_pref("toolkit.legacyUserProfileCustomizations.stylesheets", true);'
	echo 'user_pref("extensions.activeThemeID", "firefox-compact-dark@mozilla.org");'
	echo 'user_pref("browser.toolbars.bookmarks.visibility", "never");'
	echo 'user_pref("browser.startup.homepage", "");'
	echo 'user_pref("browser.sessionstore.restore_tabs_lazily", "never");'
	echo 'user_pref("browser.sessionstore.resume_from_crash", "never");'
	echo 'user_pref("browser.sessionstore.restore_on_demand", "never");'
	echo 'user_pref("browser.uiCustomization.state", "{\"placements\":{\"widget-overflow-fixed-list\":[],\"nav-bar\":[],\"toolbar-menubar\":[],\"TabsToolbar\":[],\"PersonalToolbar\":[]},\"seen\":[],\"dirtyAreaCache\":[],\"currentVersion\":18,\"newElementCount\":18}");'
}

init() {
	[ -d "$profile_dir" ] &&
		print_log "Profile already exists." &&
		exit 1

	firefox -CreateProfile "$profile_name $profile_dir"

	# user.js
	# TODO:  Find a way to disable Mozilla start page on first launch

	userjs >"$profile_dir/user.js"

	# userChrome.css
	mkdir -p "$profile_dir/chrome"
	userchrome >"$profile_dir/chrome/userChrome.css"

	print_log "Profile '$profile_name' created at: $profile_dir."
	print_log "Run '$NAME explorer' to create services."
}

create_service() {
	[ ! -f "$services_file" ] &&
		touch "$services_file"

	grep -qiEw "^<\|$profile_name:$1\|>" "$services_file" &&
		print_log "Service '$1' already exists." &&
		exit 1

	echo "<|$profile_name:$1|><|sep|>$2" >>"$services_file"
	print_log "Created service: $1"
}

get_search_query() {
	query=""

	for i in "$@"; do
		if grep -qiE "^$i$sep_esc" "$services_file"; then
			query="$query$i|"
			print_log "Launching service '$i'"
		else
			print_log "Service '$i' does not exist. Ignoring..."
		fi
	done

	echo "$query" | sed 's/|$//'
}

get_services() {
	if [ -z "$1" ]; then
		echo ''
	elif [ "$1" = "--all" ]; then
		cat "$services_file"
	else
		grep -iE "^($1)$sep_esc" "$services_file" | sed "s/^.*$sep//g"
	fi
}

launch_services() {
	urls=""

	if [ "$(echo "$1" | wc -l)" -gt 1 ]; then
		urls="$(echo "$1" | sed -z 's/\n/ /g;s/^\s*//;s/\s*$//')"
	else
		urls="-new-window $1"
	fi

	# shellcheck disable=2086
	setsid -f firefox -P "$profile_name" --class "$profile_name-services" $urls >/dev/null 2>&1
}

service() {
	[ -z "$1" ] &&
		usage_service &&
		exit

	if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
		usage_service &&
			exit
	fi

	if [ "$1" != "create" ] && [ ! -f "$services_file" ]; then
		print_log "No services available. Run '$NAME explorer' to create services." &&
			exit 1
	fi

	action="$1"
	shift

	case "$action" in

	list)
		[ "$#" -gt 1 ] &&
			print_log "Unkown argument: '$1'" &&
			usage_service &&
			exit 1

		if [ "$1" != "--raw" ] && [ "$1" != "" ]; then
			print_log "Invalid argument: '$1'" &&
				usage_service &&
				exit 1
		fi

		if [ "$1" = "--raw" ]; then
			get_services "--all"
		else
			get_services "--all" | sed "s/$sep/ | /g"
		fi
		;;

	launch)
		if [ -n "$(xdotool search --class "$profile_name-explorer")" ]; then
			print_log "Cannot launch services while explorer is running" &&
				exit 1
		fi

		[ "$1" = "--all" ] &&
			urls="$(get_services --all | sed "s/.*$sep//g")" ||
			urls="$(get_services "$(get_search_query "$@")")"

		if [ -n "$urls" ]; then
			launch_services "$urls"
		else
			print_log "No valid services provided. Exiting..." && exit 1
		fi
		;;

	*)
		print_log "Invalid action: '$action'"
		usage_service
		exit 1
		;;

	esac
}

create_workspace() {
	[ ! -f "$workspaces_file" ] &&
		touch "$workspaces_file"

	grep -qiE "^$1$sep_esc" "$workspaces_file" &&
		print_log "Workspace '$1' already exists." &&
		exit 1

	echo "$1$sep" >>"$workspaces_file"
	print_log "Created workspace: $1"
}

get_workspaces() {
	if [ -z "$1" ]; then
		echo ''
	elif [ "$1" = "--all" ]; then
		cat "$workspaces_file"
	else
		grep -iE "^$1$sep_esc" "$workspaces_file" | sed "s/^$1$sep//;s/$sep/ /g"
	fi
}

add_to_workspace() {
	! grep -qiE "^$1$sep_esc" "$workspaces_file" &&
		print_log "Workspace '$1' does not exist." &&
		exit 1

	service_list=""

	for i in $2; do

		if grep -qiE "^$i$sep_esc" "$services_file"; then
			if ! grep -qiE "^$1.*$sep_esc$i" "$workspaces_file"; then
				print_log "Adding service '$i' to workspace '$1'."
				service_list="$service_list$sep$i"
			else
				print_log "Service '$i' already exists in workspace."
			fi
		else
			print_log "Service '$i' does not exist. Ignoring..."
		fi

	done

	if [ -n "$service_list" ]; then
		service_list="$(echo "$service_list" | sed "s/$sep//")$sep"
		sed -in "s/^$1$sep.*/&$service_list/I" "$workspaces_file"
	else
		print_log "No valid services provided. Exiting." &&
			exit 1
	fi

}

remove_from_workspace() {
	! grep -qiE "^$1$sep_esc" "$workspaces_file" &&
		print_log "Workspace '$1' does not exist." &&
		exit 1

	service_list=""

	for i in $2; do
		if grep -qiE "^$1.*$sep_esc$i" "$workspaces_file"; then
			print_log "Deleting service '$i' from workspace '$1'."
			sed -in "/^$1$sep/I{s/$sep$i//}" "$workspaces_file"
		else
			print_log "Service '$i' does not exist. Ignoring..."
		fi
	done
}

workspace() {
	[ -z "$1" ] &&
		usage_workspace &&
		exit

	if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
		usage_workspace &&
			exit
	fi

	if [ "$1" != "create" ] && [ ! -f "$workspaces_file" ]; then
		print_log "No workspaces available. Run '$NAME workspace create' to create a workspace." &&
			exit 1
	fi

	action="$1"
	shift

	case "$action" in

	create)
		[ "$#" -ne 1 ] &&
			print_log "Invalid format for command." &&
			usage_workspace &&
			exit 1

		create_workspace "$1"
		;;

	list)
		[ "$#" -gt 1 ] &&
			print_log "Unkown argument: '$1'" &&
			usage_workspace &&
			exit 1

		if [ "$1" != "--raw" ] && [ "$1" != "" ]; then
			print_log "Invalid argument: '$1'" &&
				usage_workspace &&
				exit 1
		fi

		if [ "$1" = "--raw" ]; then
			get_workspaces "--all"
		else
			get_workspaces "--all" | sed "s/$sep\$//;s/$sep/\n  - /g;"
		fi
		;;

	add)
		[ "$#" -lt 2 ] &&
			print_log "Invalid format for command." &&
			usage_workspace &&
			exit 1

		[ ! -f "$services_file" ] &&
			print_log "No services available. Run '$NAME service create' to create a service." &&
			exit 1

		workspace_name="$1"
		shift
		services="$*"

		add_to_workspace "$workspace_name" "$services"
		;;

	launch)
		if [ -n "$(xdotool search --class "$profile_name-explorer")" ]; then
			print_log "Cannot launch workspaces while explorer is running" &&
				exit 1
		fi

		[ "$#" -gt 1 ] &&
			print_log "Can only launch one workspace at a time." &&
			usage_workspace &&
			exit 1

		services="$(get_workspaces "$1")"

		# shellcheck disable=2086
		if [ -n "$services" ]; then
			service launch $services
		else
			(print_log "Invalid workspace '$1'." && exit 1)
		fi
		;;

	remove)
		[ "$#" -lt 2 ] &&
			print_log "Invalid format for command." &&
			usage_workspace &&
			exit 1

		workspace_name="$1"
		shift
		services="$*"

		remove_from_workspace "$workspace_name" "$services"
		;;

	delete)
		[ "$#" -ne 1 ] &&
			print_log "Only one workspace can be deleted a time." &&
			usage_workspace &&
			exit 1

		if [ "$1" = "--all" ]; then
			printf "%s" "$profile_name: Are you sure you want to delete all your workspaces? (y/N): "
			read -r confirm </dev/tty
			case "$confirm" in
			y | Y)
				rm "$workspaces_file" &&
					print_log "All workspaces deleted."
				;;
			*)
				print_log "No workspaces deleted."
				;;
			esac

		else
			if ! grep -qiE "^$1$sep_esc" "$workspaces_file"; then
				print_log "Workspace '$1' does not exist."
			else
				sed -in "/^$1$sep/Id" "$workspaces_file" &&
					print_log "Workspace '$1' deleted"

				[ "$(wc -l <"$workspaces_file")" -eq 0 ] && rm "$workspaces_file"
			fi
		fi
		;;

	*)
		print_log "Invalid action: '$action'"
		usage_workspace
		exit 1
		;;

	esac

}

clean() {
	print_log "You can delete the created profile and all associated data"
	print_log "from Firefox's profile manager by running 'firefox -ProfileManager'."
}

save_bookmarks() {
	sqlite3 -separator "$sep" "$profile_dir/places.sqlite" 'select b.title,p.url from moz_bookmarks as b,moz_places as p where b.fk=p.id' >/tmp/tmp_bookmarks

	existing_bookmarks=""
	[ -f "$services_file" ] && existing_bookmarks="$(cat "$services_file")"

	# TODO: show which services were added and which were removed separately.
	new_bookmarks="$(grep -vf "$default_bookmark_file" /tmp/tmp_bookmarks)"

	echo "Current Services:"
	[ -n "$existing_bookmarks" ] && (
		echo
		echo "$existing_bookmarks" | sed 's/<|firebox:sep|>/\n  - /g'
		echo
	) || (
		echo "  - NIL"
		echo
	)

	if [ "$new_bookmarks" != "$existing_bookmarks" ]; then
		echo "New Services:"
		[ -n "$new_bookmarks" ] && (
			echo
			echo "$new_bookmarks" | sed 's/<|firebox:sep|>/\n  - /g'
			echo
		) || (
			echo "  - NIL"
			echo
		)

		printf "%s" "$profile_name: Do you want to add the above services? (y/N): "
		read -r confirm </dev/tty

		case "$confirm" in
		y | Y)
			echo "$new_bookmarks" >"$services_file"

			[ -z "$new_bookmarks" ] && rm "$services_file"

			print_log "Services updated!"
			;;
		*)
			print_log "No changes made to existing services."
			cp /tmp/places.sqlite "$profile_dir/places.sqlite"
			;;
		esac

	else

		print_log "No changes made to existing services."
	fi

	rm /tmp/tmp_bookmarks
}

explorer() {
	if [ -n "$(xdotool search --class "$profile_name-services")" ]; then
		print_log "Cannot launch explorer while services are running" &&
			exit 1
	fi

	sed -i '/toolkit.legacyUserProfileCustomizations.stylesheets/{s/true/false/}' "$profile_dir/user.js"

	(
		# shellcheck disable=2068
		firefox -P "$profile_name" --class "$profile_name-explorer" >/dev/null 2>&1 &&
			([ -f /tmp/places.sqlite ] && save_bookmarks) &&
			sed -i '/toolkit.legacyUserProfileCustomizations.stylesheets/{s/false/true/}' "$profile_dir/user.js" &&
			([ -f /tmp/places.sqlite ] && rm /tmp/places.sqlite)
	) &

	if [ ! -f "$default_bookmark_file" ]; then
		while true; do
			if [ ! -f "$profile_dir/places.sqlite" ]; then
				sleep 1s
			else
				break
			fi
		done
		cp "$profile_dir/places.sqlite" /tmp/places.sqlite
		sqlite3 -separator "$sep" /tmp/places.sqlite 'select b.title,p.url from moz_bookmarks as b,moz_places as p where b.fk=p.id' >"$default_bookmark_file"
	else
		cp "$profile_dir/places.sqlite" /tmp/places.sqlite
	fi

	wait
}

print_separator() {
	echo "$sep"
}

test() {
	get_search_query youtube google
}

if [ "$command" != "init" ] && [ "$command" != "test" ] && [ ! -d "$profile_dir" ]; then
	print_log "App not initialized. run '$NAME init' before running a command." &&
		exit 1
fi

if [ "$command" = "init" ] && [ "$#" -gt 0 ]; then
	print_log "Unrecognized action '$1'" &&
		usage &&
		exit 1
fi

case "$command" in
init | \
	service | \
	workspace | \
	clean | \
	print_separator | \
	explorer | \
	test)

	"$command" "$@"
	;;
*)
	print_log "Invalid Option '$command'"
	usage
	exit 1
	;;
esac
